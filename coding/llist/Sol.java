public class Sol {
    public String largestNumber(int[] nums) {

    	String ret="";
        String s_arr[] = new String[nums.length];
        int i=0;
        for(;i<nums.length;i++){
            s_arr[i]=Integer.toString(nums[i]);
	    //System.out.println(s_arr[i]);
	}
        //sort s_arr
	String temp[] = new String[2];
	for(i=0;i<s_arr.length;i++){
		for(int j=i+1;j<s_arr.length;j++){
			temp = this.sort(s_arr[i],s_arr[j]);
			s_arr[i] = temp[0];
			s_arr[j] = temp[1];
	    		System.out.println(s_arr[i]+"\t"+s_arr[j]);
		}
	}
	for(i=0;i<s_arr.length;i++){
		ret+=s_arr[i];
	}
	ret = ret.matches("0*")?"0":ret;
	return ret;
    }

    public String[] sort(String s1, String s2){
    	String ret[] = new String[2];
	int l1=s1.length(), l2=s2.length();
	int len,mx_len,i;
	String str1,str2;
	if(l1>l2){
		str1=s1;
		str2=s2;
		mx_len=l1;
		len=l2;
	}else{
		str1=s2;
		str2=s1;
		mx_len=l2;
		len=l1;
	}
	char c=str2.charAt(0);
	ret[0]=str1;
	ret[1]=str2;
	for(i=0;i<len;i++){
		if(s1.charAt(i)<s2.charAt(i)){
			ret[0]=s2;
			ret[1]=s1;
			return ret;
		}else if(s1.charAt(i)>s2.charAt(i)){
			ret[0]=s1;
			ret[1]=s2;
			return ret;
		}
		//c = s1.charAt(i);//it does not matter if we use s2 instead of s1.
	}
	if(str2.charAt(i-1)>c){
		c = str2.charAt(i-1);
	}
	if(i==len && i!=mx_len){
		for(;i<mx_len;i++){
			if(str1.charAt(i)>c){
				ret[0]=str1;
				ret[1]=str2;
				return ret;
			}else if(str1.charAt(i)<c){
				ret[0]=str2;
				ret[1]=str1;
				return ret;
			}
		}
	}
	return ret;
    }

    public  static void main(String str[]){
    	Sol sol = new Sol();
	//int i_arr[]={3, 30, 34, 5, 9};
	//int i_arr[]={2970,2465,2745};
	int i_arr[]={4704,6306,9385,7536,3462,4798,5422,5529,8070,6241,9094,7846,663,6221,216,6758,8353,3650,3836,8183,3516,5909,6744,1548,5712,2281,3664,7100,6698,7321,4980,8937,3163,5784,3298,9890,1090,7605,1380,1147,1495,3699,9448,5208,9456,3846,3567,6856,2000,3575,7205,2697,5972,7471,1763,1143,1417,6038,2313,6554,9026,8107,9827,7982,9685,3905,8939,1048,282,7423,6327,2970,4453,5460,3399,9533,914,3932,192,3084,6806,273,4283,2060,5682,2,2362,4812,7032,810,2465,6511,213,2362,3021,2745,3636,6265,1518,8398};

	System.out.println(sol.largestNumber(i_arr));
	String arr[] = sol.sort("2","291");
	System.out.println(arr[0]+"\t"+arr[1]);
    }
}

/*
4704,6306,9385,7536,3462,4798,5422,5529,8070,6241,9094,7846,663,6221,216,6758,8353,3650,3836,8183,3516,5909,6744,1548,5712,2281,3664,7100,6698,7321,4980,8937,3163,5784,3298,9890,1090,7605,1380,1147,1495,3699,9448,5208,9456,3846,3567,6856,2000,3575,7205,2697,5972,7471,1763,1143,1417,6038,2313,6554,9026,8107,9827,7982,9685,3905,8939,1048,282,7423,6327,2970,4453,5460,3399,9533,914,3932,192,3084,6806,273,4283,2060,5682,2,2362,4812,7032,810,2465,6511,213,2362,3021,2745,3636,6265,1518,8398

output:-
98909827968595339456944893859149094902689398937839883538183810810780707982784676057536747174237321720571007032685668066758674466986636554651163276306626562416221603859725909578457125682552954605422520849804812479847044453428339323905384638363699366436503636357535673516346233993298316330843021297028227452732697246523622362231322812216213206020001921763154815181495141713801147114310901048

98909827968595339456944893859149094902689398937839883538183810810780707982784676057536747174237321720571007032685668066758674466986636554651163276306626562416221603859725909578457125682552954605422520849804812479847044453428339323905384638363699366436503636357535673516346233993298316330843021297028227452732697246523622362231322812216213206020001921763154815181495141713801147114310901048

*/
